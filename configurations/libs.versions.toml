[versions]
# Gradle plugins
androidGradlePlugin = "8.9.1"
gradleNexusPlugin = "2.3.1"
sonarqubeGradlePlugin = "2.8"
licenseGradlePlugin = "0.9.0"
gradleVersionsPlugin = "0.43.0"
versionCatalogUpdatePlugin = "0.7.0"
mkdocsGradlePlugin = "3.0.0"
# Expected Android SDK
minSdkVersion = "24"
targetSdkVersion = "35"
compileSdkVersion = "35"
cmakeVersion = "3.22.1"
ndkVersion = "23.0.7599858"
# Java information
java = "21"
# Dokka
dokka = "1.9.20"
dokka-supress-undocumented = "1.1"
# Quality
detekt = "1.21.0"
ktlint = "1.2.1"
# Kotlin
kotlin = "2.1.20"
kotlin-ksp = "2.1.20-2.0.1"
kotlinx-coroutines = "1.9.0"
kotlinx-datetime="0.7.1"
kotlinx = "1.6.3"
# Networking
okhttp = "4.10.0"
retrofit = "2.9.0"
# Serialization
jackson = "2.8.7"
gson = "2.9.1"
opencsv = "5.7.1"
moshi = "1.14.0"
moshix = "0.19.0"
# Testing
junit = "4.13.2"
junit-jupiter = "5.10.1"
junit-servers = "2.1.0"
servlet = "2.5"
truth = "1.1.3"
mockito-kotlin = "4.1.0"
mockito-core = "4.11.0"
mockito-inline = "4.11.0"
mockito-android = "4.11.0"
androidx-test = "1.6.1"
androidx-test-ext-junit = "1.2.1"
espresso = "3.4.0"
turbine = "0.12.1"
# AndroidX/Material
androidx-activity = "1.9.3"
androidx-annotation = "1.9.1"
androidx-core = "1.15.0"
androidx-fragment = "1.3.6"
androidx-recyclerview = "1.3.2"
androidx-appcompat = "1.7.0"
androidx-constraintLayout = "2.2.0"
androidx-coordinatorLayout = "1.2.0"
androidx-lifecycle = "2.8.7"
androidx-lifecycle-runtime-compose = "2.8.7"
androidx-multidex = "2.0.1"
androidx-navigation = "2.8.4"
androidx-datastore = "1.1.1"
androidx-core-splashscreen = "1.0.1"
material = "1.7.0"
# Compose
androidx-compose = "1.7.5"
jetbrains-compose = "1.7.1"
androidx-compose-material3 = "1.1.2"
# @keep
androidx-compose-compiler = "1.5.11"
androidx-hilt-navigation-compose = "1.0.0"
accompanist = "0.30.1"
destinations-compose = "1.7.22-beta"
toolbar-compose = "2.3.5"
# Voxeet
voxeet-uxkit = "3.7.0"
voxeet-promise = "[2.9.0,)"
voxeet-audio = "2.7.0"
# Dependency injection
hilt = "2.44"
koin = "3.5.6"
# Facebook
facebook-soloader = "0.10.4"
# @pin
slf4j = "2.0.3"
# Other
eventbus = "3.3.1"
butterknife = "7.0.1"
picasso = "2.71828"
# @pin
desugarJdkLibs = "1.1.5"
processPhoenix = "2.1.2"
coil = "2.2.2"
# Nexus publication
publish-nexus = "1.3.0"

# Set of components & tools
multiplatform-precompose = "1.7.0-alpha01"
multiplatform-precompose-web = "1.7.0-alpha03"
multiplatform-precompose-hold = "1.5.5"
multiplatform-sentry = "0.0.2"
codlab-libraries = "1.14.2"
codlab-libraries-file-access = "1.16.1"
codlab-libraries-http = "1.20.1"
codlab-libraries-widget-compose = "1.16.0"
codlab-libraries-safearea = "1.17.0"
codlab-libraries-viewmodel = "1.15.1"
codlab-libraries-permissions = "1.17.0-alpha1"
codlab-libraries-weather = "0.1.4"
versions = "0.47.0"

# Multiplatform
moko-resources = "0.24.1"
multiplatform-buildkonfig = "0.17.0"
fuzzywuzzy-multiplatform = "0.1.1"
preferences-library = "1.0.0"

# License reporting
libraries-report = "12.0.0-b02"

# Firebase
firebase-bom = "32.5.0"

# Preview in IntelliJ
hotpreview = "0.1.6"

[libraries]
# Gradle plugins
android-gradlePlugin = { module = "com.android.tools.build:gradle", version.ref = "androidGradlePlugin" }
kotlin-gradlePlugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
nexus-gradlePlugin = { module = "com.bmuschko:gradle-nexus-plugin", version.ref = "gradleNexusPlugin" }
sonarqube-gradlePlugin = { module = "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin", version.ref = "sonarqubeGradlePlugin" }
license-gradlePlugin = { module = "com.jaredsburrows:gradle-license-plugin", version.ref = "licenseGradlePlugin" }
gradle-versions-plugin = { module = "com.github.ben-manes:gradle-versions-plugin", version.ref = "gradleVersionsPlugin" }
version-catalog-update-plugin = { module = "nl.littlerobots.vcu:plugin", version.ref = "versionCatalogUpdatePlugin" }
mkdocs-gradlePlugin = { module = "ru.vyarus:gradle-mkdocs-plugin", version.ref = "mkdocsGradlePlugin" }
dokka-gradlePlugin = { module = "org.jetbrains.dokka:dokka-gradle-plugin", version.ref = "dokka" }
# Dokka
dokka-androidDocumentationPlugin = { module = "org.jetbrains.dokka:android-documentation-plugin", version.ref = "dokka" }
dokka-suppressUndocumentedPlugin = { module = "io.github.romansavka-mq:suppress-undocumented-dokka-plugin", version.ref = "dokka-supress-undocumented" }
# Quality
detekt = { module = "io.gitlab.arturbosch.detekt:detekt-cli", version.ref = "detekt" }
ktlint = { module = "com.pinterest.ktlint:ktlint-cli", version.ref = "ktlint" }
# Kotlin
kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
# Networking
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
okhttp-loggingInterceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okhttp" }
okhttp-mockwebserver = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okhttp" }
retrofit = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofit-converter-jackson = { module = "com.squareup.retrofit2:converter-jackson", version.ref = "retrofit" }
retrofit-converter-moshi = { module = "com.squareup.retrofit2:converter-moshi", version.ref = "retrofit" }
retrofit-converter-scalars = { module = "com.squareup.retrofit2:converter-scalars", version.ref = "retrofit" }
# Serialization
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jackson-annotations = { module = "com.fasterxml.jackson.core:jackson-annotations", version.ref = "jackson" }
gson = { module = "com.google.code.gson:gson", version.ref = "gson" }
opencsv = { module = "com.opencsv:opencsv", version.ref = "opencsv" }
moshi = { module = "com.squareup.moshi:moshi", version.ref = "moshi" }
moshi-adapters = { module = "com.squareup.moshi:moshi-adapters", version.ref = "moshi" }
moshi-kotlin = { module = "com.squareup.moshi:moshi-kotlin", version.ref = "moshi" }
moshi-kotlinCodegen = { module = "com.squareup.moshi:moshi-kotlin-codegen", version.ref = "moshi" }
moshix-sealed-reflect = { module = "dev.zacsweers.moshix:moshi-sealed-reflect", version.ref = "moshix" }
moshix-sealed-runtime = { module = "dev.zacsweers.moshix:moshi-sealed-runtime", version.ref = "moshix" }
# Testing
junit = { module = "junit:junit", version.ref = "junit" }
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit-jupiter" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit-jupiter" }
junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junit-jupiter" }
junit-vintage-engine = { module = "org.junit.vintage:junit-vintage-engine", version.ref = "junit-jupiter" }
junit-servers-core = { module = "com.github.mjeanroy:junit-servers-core", version.ref = "junit-servers" }
servlet-api = { module = "javax.servlet:servlet-api", version.ref = "servlet" }
truth = { module = "com.google.truth:truth", version.ref = "truth" }
mockito-kotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "mockito-kotlin" }
mockito-core = { module = "org.mockito:mockito-core", version.ref = "mockito-core" }
mockito-inline = { module = "org.mockito:mockito-inline", version.ref = "mockito-inline" }
mockito-android = { module = "org.mockito:mockito-android", version.ref = "mockito-android" }
androidx-test-rules = { module = "androidx.test:rules", version.ref = "androidx-test" }
androidx-test-runner = { module = "androidx.test:runner", version.ref = "androidx-test" }
androidx-test-core-ktx = { module = "androidx.test:core-ktx", version.ref = "androidx-test" }
androidx-test-ext-junit = { module = "androidx.test.ext:junit", version.ref = "androidx-test-ext-junit" }
androidx-espresso-core = { module = "androidx.test.espresso:espresso-core", version.ref = "espresso" }
turbine = { module = "app.cash.turbine:turbine", version.ref = "turbine" }
# AndroidX/Material
androidx-fragment = { module = "androidx.fragment:fragment", version.ref = "androidx-fragment" }
androidx-core = { module = "androidx.core:core", version.ref = "androidx-core" }
androidx-annotation = { module = "androidx.annotation:annotation", version.ref = "androidx-annotation" }
androidx-appcompat = { module = "androidx.appcompat:appcompat", version.ref = "androidx-appcompat" }
androidx-recyclerview = { module = "androidx.recyclerview:recyclerview", version.ref = "androidx-recyclerview" }
androidx-constraintLayout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "androidx-constraintLayout" }
androidx-coordinatorLayout = { module = "androidx.coordinatorlayout:coordinatorlayout", version.ref = "androidx-coordinatorLayout" }
androidx-multidex = { module = "androidx.multidex:multidex", version.ref = "androidx-multidex" }
androidx-lifecycle-runtime-compose = { module = "androidx.lifecycle:lifecycle-runtime-compose", version.ref = "androidx-lifecycle-runtime-compose" }
androidx-lifecycle-common = { module = "androidx.lifecycle:lifecycle-common", version.ref = "androidx-lifecycle" }
androidx-lifecycle-runtime-ktx = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "androidx-lifecycle" }
androidx-lifecycle-viewmodel = { module = "androidx.lifecycle:lifecycle-viewmodel", version.ref = "androidx-lifecycle" }
androidx-lifecycle-viewmodel-ktx = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "androidx-lifecycle" }
androidx-core-ktx = { module = "androidx.core:core-ktx", version.ref = "androidx-core" }
androidx-datastore = { module = "androidx.datastore:datastore", version.ref = "androidx-datastore" }
androidx-datastore-preferences = { module = "androidx.datastore:datastore-preferences", version.ref = "androidx-datastore" }
androidx-material = { module = "com.google.android.material:material", version.ref = "material" }
androidx-core-splashscreen = { module = "androidx.core:core-splashscreen", version.ref = "androidx-core-splashscreen" }

# KotlinX
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx" }
kotlinx-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-jvm = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-swing", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }

# Compose
androidx-compose-runtime = { module = "androidx.compose.runtime:runtime", version.ref = "androidx-compose" }
androidx-compose-ui = { module = "androidx.compose.ui:ui", version.ref = "androidx-compose" }
androidx-compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "androidx-compose" }
androidx-compose-ui-toolingPreview = { module = "androidx.compose.ui:ui-tooling-preview", version.ref = "androidx-compose" }
androidx-compose-animation = { module = "androidx.compose.animation:animation", version.ref = "androidx-compose" }
androidx-compose-foundation = { module = "androidx.compose.foundation:foundation", version.ref = "androidx-compose" }
androidx-compose-material = { module = "androidx.compose.material:material", version.ref = "androidx-compose" }
androidx-compose-material-icons-extended = { module = "androidx.compose.material:material-icons-extended", version.ref = "androidx-compose" }
androidx-compose-material3 = { module = "androidx.compose.material3:material3", version.ref = "androidx-compose-material3" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activity" }
androidx-hilt-navigation-compose = { module = "androidx.hilt:hilt-navigation-compose", version.ref = "androidx-hilt-navigation-compose" }
androidx-lifecycle-viewmodel-compose = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "androidx-lifecycle" }
androidx-navigation-compose = { module = "androidx.navigation:navigation-compose", version.ref = "androidx-navigation" }
accompanist-insets = { module = "com.google.accompanist:accompanist-insets", version.ref = "accompanist" }
accompanist-navigation-animation = { module = "com.google.accompanist:accompanist-navigation-animation", version.ref = "accompanist" }
accompanist-navigation-material = { module = "com.google.accompanist:accompanist-navigation-material", version.ref = "accompanist" }
accompanist-systemuicontroller = { module = "com.google.accompanist:accompanist-systemuicontroller", version.ref = "accompanist" }
accompanist-flowlayout = { module = "com.google.accompanist:accompanist-flowlayout", version.ref = "accompanist" }
destinations-compose-core = { module = "io.github.raamcosta.compose-destinations:core", version.ref = "destinations-compose" }
destinations-compose-animations-core = { module = "io.github.raamcosta.compose-destinations:animations-core", version.ref = "destinations-compose" }
destinations-compose-ksp = { module = "io.github.raamcosta.compose-destinations:ksp", version.ref = "destinations-compose" }
toolbar-compose = { module = "me.onebone:toolbar-compose", version.ref = "toolbar-compose" }
# Voxeet
voxeet-uxkit-systemService = { module = "com.voxeet.sdk:uxkit-system-service", version.ref = "voxeet-uxkit" }
voxeet-uxkit-exoplayer = { module = "com.voxeet.sdk:uxkit-exoplayer-support", version.ref = "voxeet-uxkit" }
voxeet-uxkit-youtube = { module = "com.voxeet.sdk:uxkit-youtube", version.ref = "voxeet-uxkit" }
voxeet-promise = { module = "io.dolby:promise", version.ref = "voxeet-promise" }
voxeet-promise-ktx = { module = "io.dolby:promise-ktx", version.ref = "voxeet-promise" }
voxeet-audio = { module = "io.dolby:audio", version.ref = "voxeet-audio" }
# Facebook
facebook-soloader = { module = "com.facebook.soloader:soloader", version.ref = "facebook-soloader" }
# Dependency injection
hilt-gradle = { module = "com.google.dagger:hilt-android-gradle-plugin", version.ref = "hilt" }
hilt-core = { module = "com.google.dagger:hilt-core", version.ref = "hilt" }
hilt-android = { module = "com.google.dagger:hilt-android", version.ref = "hilt" }
hilt-android-testing = { module = "com.google.dagger:hilt-android-testing", version.ref = "hilt" }
hilt-compiler = { module = "com.google.dagger:hilt-compiler", version.ref = "hilt" }
koin-android = { module = "io.insert-koin:koin-android", version.ref = "koin" }
# Logs
slf4j = { module = "org.slf4j:slf4j-nop", version.ref = "slf4j" }
# Other
eventbus = { module = "org.greenrobot:eventbus", version.ref = "eventbus" }
butterknife = { module = "com.jakewharton:butterknife", version.ref = "butterknife" }
picasso = { module = "com.squareup.picasso:picasso", version.ref = "picasso" }
desugarJdkLibs = { module = "com.android.tools:desugar_jdk_libs", version.ref = "desugarJdkLibs" }
processPhoenix = { module = "com.jakewharton:process-phoenix", version.ref = "processPhoenix" }
coil-compose = { module = "io.coil-kt:coil-compose", version.ref = "coil" }
coil = { module = "io.coil-kt:coil", version.ref = "coil" }

# Set of components & tools
multiplatform-safearea = { module = "eu.codlab:kotlin-safearea", version.ref = "codlab-libraries-safearea" }
multiplatform-collapsing-toolbar = { module = "eu.codlab:kotlin-collapsing-toolbar", version.ref = "codlab-libraries" }
multiplatform-moko-resources-ext = { module = "eu.codlab:kotlin-moko-resources-ext", version.ref = "codlab-libraries" }
multiplatform-kamel-image-ext = { module = "eu.codlab:kotlin-kamel-image-ext", version.ref = "codlab-libraries" }
multiplatform-sentry = { module = "eu.codlab:kotlin-sentry", version.ref = "multiplatform-sentry" }
multiplatform-widgets-compose = { module = "eu.codlab:kotlin-widgets-compose", version.ref = "codlab-libraries-widget-compose" }
multiplatform-file-access = { module = "eu.codlab:kotlin-file-access", version.ref = "codlab-libraries-file-access" }
multiplatform-http-client = { module = "eu.codlab:kotlin-http-client", version.ref = "codlab-libraries-http" }
multiplatform-platform = { module = "eu.codlab:kotlin-platform", version.ref = "codlab-libraries" }
multiplatform-precompose = { module = "moe.tlaster:precompose", version.ref = "multiplatform-precompose" }
multiplatform-precompose-web = { module = "moe.tlaster:precompose", version.ref = "multiplatform-precompose-web" }
multiplatform-permissions = { module = "eu.codlab:kotlin-permissions", version.ref = "codlab-libraries-permissions" }
multiplatform-permissions-bluetooth = { module = "eu.codlab:kotlin-permissions-bluetooth", version.ref = "codlab-libraries-permissions" }
multiplatform-permissions-camera = { module = "eu.codlab:kotlin-permissions-camera", version.ref = "codlab-libraries-permissions" }
multiplatform-permissions-contacts = { module = "eu.codlab:kotlin-permissions-contacts", version.ref = "codlab-libraries-permissions" }
multiplatform-permissions-gallery = { module = "eu.codlab:kotlin-permissions-gallery", version.ref = "codlab-libraries-permissions" }
multiplatform-permissions-location = { module = "eu.codlab:kotlin-permissions-location", version.ref = "codlab-libraries-permissions" }
multiplatform-permissions-microphone = { module = "eu.codlab:kotlin-permissions-microphone", version.ref = "codlab-libraries-permissions" }
multiplatform-permissions-motion = { module = "eu.codlab:kotlin-permissions-motion", version.ref = "codlab-libraries-permissions" }
multiplatform-permissions-notifications = { module = "eu.codlab:kotlin-permissions-notifications", version.ref = "codlab-libraries-permissions" }
multiplatform-permissions-storage = { module = "eu.codlab:kotlin-permissions-storage", version.ref = "codlab-libraries-permissions" }
multiplatform-weather-common-compose = { module = "eu.codlab:kotlin-weather-common-compose", version.ref = "codlab-libraries-weather" }
multiplatform-weather-openweathermap = { module = "eu.codlab:kotlin-openweathermap", version.ref = "codlab-libraries-weather" }
multiplatform-weather-google-maps = { module = "eu.codlab:kotlin-google-maps", version.ref = "codlab-libraries-weather"}
multiplatform-weather-xweather = { module = "eu.codlab:kotlin-xweather", version.ref = "codlab-libraries-weather"}
multiplatform-viewmodel = { module = "eu.codlab:kotlin-viewmodel", version.ref = "codlab-libraries-viewmodel" }
multiplatform-viewpager = { module = "eu.codlab:kotlin-viewpager", version.ref = "codlab-libraries" }
multiplatform-maps-compose = { module = "eu.codlab:kotlin-moko-maps-compose", version.ref = "codlab-libraries" }
multiplatform-openstf-api = { module = "eu.codlab:kotlin-openstf-api", version.ref = "codlab-libraries" }
multiplatform-string-fuzzywuzzy = { module = "eu.codlab:fuzzywuzzy-kotlin", version.ref = "fuzzywuzzy-multiplatform" }
managed-device-gradlePlugin = { module = "eu.codlab.gradle.plugin.managed-device:eu.codlab.gradle.plugin.managed-device.gradle.plugin", version.ref = "codlab-libraries" }
openstf-gradlePlugin = { module = "eu.codlab.gradle.plugin.openstf-gradle:eu.codlab.gradle.plugin.openstf-gradle.gradle.plugin", version.ref = "codlab-libraries" }
preferences-library = { module = "me.zhanghai.compose.preference:library", version.ref = "preferences-library" }

# Preview in the IDE
hotpreview = { group = "de.drick.compose", name = "hotpreview", version.ref = "hotpreview" }

# License reporting
libraries-report = { group = "com.mikepenz", name = "aboutlibraries-core", version.ref = "libraries-report" }

# Firebase
firebase-bom = { group = "com.google.firebase", name = "firebase-bom", version.ref = "firebase-bom" }
firebase-analytics = { group = "com.google.firebase", name = "firebase-analytics-ktx" }
firebase-crashlytics = { group = "com.google.firebase", name = "firebase-crashlytics-ktx" }
firebase-messaging = { group = "com.google.firebase", name = "firebase-messaging-ktx" }
firebase-pref = { group = "com.google.firebase", name = "firebase-perf-ktx" }

[plugins]
ksp = { id = "com.google.devtools.ksp", version.ref = "kotlin-ksp" }
dokka = { id = "org.jetbrains.dokka", version.ref = "dokka" }
publish-nexus = { id = "io.github.gradle-nexus.publish-plugin", version.ref = "publish-nexus" }

managed-device = { id = "eu.codlab.gradle.plugin.managed-device", version.ref = "codlab-libraries" }
openstf = { id = "eu.codlab.gradle.plugin.openstf-gradle", version.ref = "codlab-libraries" }
versions = { id = "com.github.ben-manes.versions", version.ref = "versions" }

# android
android-library = { id = "com.android.library", version.ref = "androidGradlePlugin" }
android-application = { id = "com.android.application", version.ref = "androidGradlePlugin" }

# kotlin specific plugins
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlin-cocoapods = { id = "org.jetbrains.kotlin.native.cocoapods", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }

# compose plugins
jetbrains-compose = { id = "org.jetbrains.compose", version.ref = "jetbrains-compose" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }

# kotlin & compose related plugins
multiplatform-buildkonfig = { id = "com.codingfeline.buildkonfig", version.ref = "multiplatform-buildkonfig" }
multiplatform-moko-resources-generator = { id = "dev.icerock.mobile.multiplatform-resources", version.ref = "moko-resources" }

# License reporting
libraries-report = { id = "com.mikepenz.aboutlibraries.plugin", version.ref = "libraries-report" }
